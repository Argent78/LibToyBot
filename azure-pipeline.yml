
name: $(version.Major).$(version.Minor)$(rev:.r)

trigger:
- master
- develop

variables:
  version: $(Build.BuildNumber)-preview
  buildConfiguration: Release

pool:
  name: Hosted Windows 2019 with VS2019

steps:

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    restoreDirectory: '$(Pipeline.Workspace)\nuget'

- task: DotNetCoreCLI@2
  displayName: 'Build - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool'

- task: DotNetCoreCLI@2
  displayName: 'Run tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*Test.csproj'

- script: |
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
  displayName: 'Create code coverage report'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'  

- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  displayName: Pack 
  inputs:
    command: pack    
    packagesToPack: '**/LibToyBot.csproj'
    versioningScheme: byBuildNumber    
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'master'))
  displayName: Pack (Preview)  
  inputs:
    command: pack    
    packagesToPack: '**/LibToyBot.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: version     
    arguments: '--configuration $(buildConfiguration)'


- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  displayName: Pack Toy Box Lib
  inputs:
    command: pack    
    packagesToPack: '**/LibToyBot.ToyBox.csproj'
    versioningScheme: byBuildNumber    
    arguments: '--configuration $(buildConfiguration)'


- task: DotNetCoreCLI@2
  condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'master'))
  displayName: Pack ToyBox Lib(Preview)  
  inputs:
    command: pack    
    packagesToPack: '**/LibToyBot.ToyBox.csproj'
    versioningScheme: byEnvVar
    versionEnvVar: version     
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2  
  displayName: 'Push NuGet' 
  condition: and(succeeded(), or( eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'master') ), false) #disabled
  inputs:
    command: push    
    publishVstsFeed: '/9549f135-9aeb-42aa-9fe5-b09a7b7c41ea'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeeded()
